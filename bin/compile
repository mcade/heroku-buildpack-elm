#!/bin/bash

set -eo pipefail

indent() {
  sed -u 's/^/       /'
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(cd "$(dirname $0)/.." && pwd)


# Accept user-defined environment
if test -f ${build}/.buildpack.env; then
    source ${build}/.buildpack.env
fi

ELM_VERSION=${ELM_VERSION:-0.16}
S3_URL=https://s3.amazonaws.com/heroku-buildpack-elm/assets

download() {
           url=$1
           basename=$2
           if test -f ${basename}
           then
            true
           else
            wget -nv -c ${url}/${basename}
           fi
}

error() {
    msg=$1
    echo "    !! ${msg}"
    exit 1
}

mkcd()
{
    mkdir -p $1 && cd $1
}

PATH=${cache}/bin/elm-${ELM_VERSION}:$PATH

mkcd ${cache}/bin/elm-${ELM_VERSION}
echo "-----> Retrieving ${ELM_VERSION}"
download ${S3_URL}/elm/${ELM_VERSION} elm
download ${S3_URL}/elm/${ELM_VERSION} elm-package
download ${S3_URL}/elm/${ELM_VERSION} elm-make

chmod -R a+x ${cache}/bin

# Restore elm package cache
if test -d ${cache}/web/elm/elm-stuff; then
   echo "-----> Restoring Elm cache"
   cp -r ${cache}/web/elm/elm-stuff ${build}/web/elm/elm-stuff
fi

cd ${build}/web/elm
echo "-----> Fetching dependencies"
elm package install --yes | indent
elm package install evancz/elm-html --yes | indent

get_app_json_env() {
    name=$1
    if ! test -f ${build}/web/elm/app.json; then
        error "app.json missing."
    fi
    python -c "import json; j=json.load(open('app.json')); print j['env']['${name}']"
}


build_pack_dir=$(cd $(dirname $(dirname $0)); pwd)

# Ensure dirs are present
mkdir -p $1 $2 $3

build_dir=$(cd $1 && pwd)
cache_dir=$(cd $2 && pwd)
env_dir=$(cd $3 && pwd)
heroku_dir=$build_dir/.heroku
mkdir -p $heroku_dir/node

source ${build_pack_dir}/lib/common.sh
source ${build_pack_dir}/lib/build.sh

old_npm=$(file_contents "$cache_dir/npm-version")
old_node=$(file_contents "$cache_dir/node-version")

head "Loading configuration and environment"
load_config
export_config_vars
export_mix_env

cached_node=$cache_dir/node-v$node_version-linux-x64.tar.gz

head "Installing binaries"
download_node
install_node
install_npm

head "Building dependencies"
install_and_cache_npm_deps

ELM_COMPILE=$(get_app_json_env "ELM_COMPILE")
echo "-----> Compiling with ${ELM_COMPILE}"
${ELM_COMPILE} | indent

# Copy package and compile artifacts back to cache
cp -r ${build}/web/elm/elm-stuff ${cache}/

compile

head "Finalizing build"
write_profile
